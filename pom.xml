<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.microsoft.example</groupId>
  <artifactId>myshuttle</artifactId>
  <version>0.0.1</version>
  <packaging>war</packaging>
  <properties>
      <sonar.organization>canarysautomations</sonar.organization>
      <sonar.host.url>https://sonarcloud.io</sonar.host.url>
  </properties>
  <build>
  	<finalName>myshuttle</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <!-- <version>2.20</version> -->
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.4</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeScope>test</includeScope>
              <outputDirectory>${project.build.directory}/test-jars/</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.16</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.github.detro.ghostdriver</groupId>
      <artifactId>phantomjsdriver</artifactId>
      <version>1.0.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>6.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
this.isActionAllowed = function (action, jobSummary) {
                if (jobSummary.status == undefined) {
                    return;
                }
                status = jobSummary.status.toLowerCase();
                switch (action.toLowerCase()) {
                    case JOB_ACTION.SUSPEND:
                        switch (status) {
                            case JOB_STATUS.RUNNING:
                            case JOB_STATUS.PENDING:
                            case JOB_STATUS.WAITING:
                            case JOB_STATUS.QUEUED:
                                return true;
                            default:
                                return false;
                        }
                    case JOB_ACTION.KILL:
                        switch (status) {
                            case JOB_STATUS.RUNNING:
                            case JOB_STATUS.PENDING:
                            case JOB_STATUS.SUSPENDED:
                            case JOB_STATUS.WAITING:
                            case JOB_STATUS.QUEUED:
                                return true;
                            default:
                                return false;
                        }
                    case JOB_ACTION.RESUME:
                        switch (status) {
                            case JOB_STATUS.SUSPENDED:
                            case JOB_STATUS.PENDING:
                                return true;
                            default:
                                return false;
                        }
                    case JOB_ACTION.RESUBMIT:
                        switch (status) {
                            case JOB_STATUS.COMPLETED:
                            case JOB_STATUS.COMPLETED_WITH_ERRORS:
                            case JOB_STATUS.FAILED:
                            case JOB_STATUS.KILLED:
                            case JOB_STATUS.FAILED_TO_START:
                                return true;
                            default:
                                return false;
                        }
